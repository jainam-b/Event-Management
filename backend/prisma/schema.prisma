// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tickets      Ticket[]
  transactions Transaction[]
}

model Event {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  location     String
  date         DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ticketTypes  TicketType[]
  tickets      Ticket[]
  transactions Transaction[]
  seatMap      SeatMap[]
}

model TicketType {
  id                Int      @id @default(autoincrement())
  eventId           Int
  name              String
  price             Int
  totalQuantity     Int
  availableQuantity Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets           Ticket[]
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELED
}

model Ticket {
  id            Int          @id @default(autoincrement())
  userId        Int
  eventId       Int
  ticketTypesId Int
  purchasedDate DateTime
  status        TicketStatus @default(ACTIVE)
  user          User         @relation(fields: [userId], references: [id])
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType    TicketType   @relation(fields: [ticketTypesId], references: [id])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int?
  eventId         Int
  totalAmount     Float
  paymentMethod   String
  paymentStatus   String   @default("completed")
  transactionDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model SeatMap {
  id         Int      @id @default(autoincrement())
  eventId    Int
  seatNumber String
  isReserved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
