// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         userRole      @default(user)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tickets      Ticket[]
  transactions Transaction[]
  SeatMap      SeatMap[]
}

enum userRole {
  user
  admin
  eventPlanner
}

model Event {
  id           String        @id @default(uuid())
  name         String
  description  String?
  location     String
  date         DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ticketTypes  TicketType[]
  tickets      Ticket[]
  transactions Transaction[]
  seatMap      SeatMap[]
}

model TicketType {
  id                String        @id @default(uuid())
  eventId           String
  name              String
  price             Int
  totalQuantity     Int
  availableQuantity Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets           Ticket[]
  transactions      Transaction[]
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELED
}

model Ticket {
  id            String       @id @default(uuid())
  userId        String
  eventId       String
  ticketTypesId String
  seatId        String
  quantity      Int          @default(1)
  purchasedDate DateTime     @default(now())
  status        TicketStatus @default(ACTIVE)
  user          User         @relation(fields: [userId], references: [id])
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType    TicketType   @relation(fields: [ticketTypesId], references: [id])
  seat          SeatMap      @relation(fields: [seatId], references: [id])
}

model Transaction {
  id              String     @id @default(uuid())
  userId          String?
  eventId         String
  ticketTypesId   String
  totalAmount     Float
  paymentMethod   String
  paymentStatus   String     @default("completed")
  transactionDate DateTime   @default(now())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User?      @relation(fields: [userId], references: [id])
  event           Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType      TicketType @relation(fields: [ticketTypesId], references: [id])
}

model SeatMap {
  id         String   @id @default(uuid())
  userId     String?
  eventId    String
  seatNumber String
  row        Int
  column     Int
  isReserved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])
  ticket     Ticket[]
}
